class App extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      breakLength: 5,
      sessionLength: 25,
      timerStatus: 'Session',
      running: false,
      timeLeft: "25:00"
    }
    this.controlBreakIncrement = this.controlBreakIncrement.bind(this);
    this.controlBreakDecrement = this.controlBreakDecrement.bind(this);
    this.controlSessionIncrement = this.controlSessionIncrement.bind(this);
    this.controlSessionDecrement = this.controlSessionDecrement.bind(this);
    this.playPauseSession = this.playPauseSession.bind(this);
    this.resetSession = this.resetSession.bind(this);
    this.updateCounter = this.updateCounter.bind(this);
    
  }
  controlBreakIncrement(event){
    if (this.state.breakLength < 60 && !this.state.running){
      this.setState((state) => ({breakLength: state.breakLength + 1}),
                   ()=>(this.updateTimeLeft(this.state.breakLength, 'Break')))
    }
  }
  controlBreakDecrement(event){
    if (this.state.breakLength > 1 && !this.state.running){
      this.setState((state) => ({breakLength: state.breakLength - 1}),
                   ()=>(this.updateTimeLeft(this.state.breakLength, 'Break')))
    }
  }
  controlSessionIncrement(event){
    if (this.state.sessionLength < 60 && !this.state.running){
      this.setState((state) => ({sessionLength: state.sessionLength + 1}),
                   ()=>(this.updateTimeLeft(this.state.sessionLength, 'Session')))
    }
  }
  controlSessionDecrement(event){
    if (this.state.sessionLength > 1 && !this.state.running){
      this.setState((state) => ({sessionLength: state.sessionLength - 1}),
                   ()=>(this.updateTimeLeft(this.state.sessionLength, 'Session')))
    }
  }
  updateTimeLeft(entry, status){
    if (this.state.timerStatus === status){
      this.setState({timeLeft: (entry >= 10 ? entry.toString() : "0" + entry.toString()) + ":00"})
    }
  }
  updateCounter(){
    //console.log(this.state)
    let newTime = (new Date()).getTime();
    let interval = newTime - this.clickTime;
    let dateLeft = new Date(this.msLeft-interval);
    let minutesLeft = dateLeft.getMinutes() >= 10? dateLeft.getMinutes().toString() : "0" + dateLeft.getMinutes().toString();
    let secondsLeft = dateLeft.getSeconds() >= 10 ? dateLeft.getSeconds().toString() : "0" + dateLeft.getSeconds().toString();
    this.setState({timeLeft: minutesLeft + ":" + secondsLeft}, () => (this.checkZero(this.state.timeLeft)))
  }
  checkZero(timeLeft){
    if (timeLeft === "00:00"){
      clearInterval(this.myInterval)
      document.getElementById("beep").play();
      //console.log(this.state.sessionLength, this.state.breakLength);
      this.triggerCounter();
    }
  }
  triggerCounter(){
    let breakLength = (this.state.breakLength >= 10 ? (this.state.breakLength).toString() : "0" + (this.state.breakLength).toString()) + ":00";
    let sessionLength = (this.state.sessionLength >= 10 ? (this.state.sessionLength).toString() : "0" + (this.state.sessionLength).toString()) + ":00";
    this.triggerTimeout = setTimeout(() => {
      this.setState((state) => ({timerStatus: (state.timerStatus === "Session"? "Break" : "Session")}), () => (this.counter(this.state.running, this.state.timerStatus === "Session"? sessionLength : breakLength)))
      }, 1000);
  }
  counter(check, timeLeft=this.state.timeLeft){
    if (check && timeLeft !== "00:00"){
      this.setState({timeLeft: timeLeft})
      this.counterTimeout = setTimeout(()=>{
        this.clickTime = (new Date()).getTime();
        let minutesLeft = parseInt(timeLeft.split(":")[0]);
        let secondsLeft = parseInt(timeLeft.split(":")[1]);
        this.msLeft = minutesLeft*60*1000 + (secondsLeft)*1000;
        this.myInterval = setInterval(this.updateCounter, 100)
      }, 1000)
    } else if (check && timeLeft === "00:00"){
      this.triggerCounter();
    }
    else {
      clearTimeout(this.counterTimeout)
      clearTimeout(this.triggerTimeout)
      clearInterval(this.myInterval);
    }
  }
  playPauseSession(event){
    this.setState(state => ({
      running: !(state.running)
    }), () => (this.counter(this.state.running)))
  }
  resetSession(event){
    clearTimeout(this.counterTimeout);
    clearTimeout(this.triggerTimeout);
    clearInterval(this.myInterval);
    document.getElementById("beep").pause();
    document.getElementById("beep").currentTime = 0;
    this.setState({
      running: false,
      breakLength: 5,
      sessionLength: 25,
      timeLeft: "25:00",
      timerStatus: "Session"
    })
  }
  render(){
    return(
      <div id="clock">
        <h1>25+5 Clock</h1>
        <div id="break-session-flex">
          <Break breakLength={this.state.breakLength} controlBreakIncrement={this.controlBreakIncrement} controlBreakDecrement={this.controlBreakDecrement}/>
          <Session sessionLength={this.state.sessionLength} controlSessionIncrement={this.controlSessionIncrement} controlSessionDecrement={this.controlSessionDecrement}/>
        </div>
        <Timer timerStatus={this.state.timerStatus} timeLeft={this.state.timeLeft} playPauseSession={this.playPauseSession} resetSession={this.resetSession}/>
      </div>
  )
  }
};

const Break = function(props){
  return(
    <div id="break">
       <div id="break-label">Break Length</div>
       <button id="break-increment" onClick={props.controlBreakIncrement}>
         <i class="fa-solid fa-plus"></i>
       </button>
       <button id="break-decrement" onClick={props.controlBreakDecrement}>
         <i class="fa-solid fa-minus"></i>
       </button>
       <div id="break-length">{props.breakLength}</div>
    </div>
  )
}

const Session = function(props){
  return(
    <div id="session">
        <div id="session-label">Session Length</div>
        <button id="session-increment" onClick={props.controlSessionIncrement}>
          <i class="fa-solid fa-plus"></i>
        </button>
        <button id="session-decrement" onClick={props.controlSessionDecrement}>
          <i class="fa-solid fa-minus"></i>
        </button>
        <div id="session-length">{props.sessionLength}</div>
    </div>
  ) 
}

const Timer = function(props){
  return (
    <div id="timer">
        <div id="timer-label">{props.timerStatus}</div>
        <div id="time-left">{props.timeLeft}</div>
        <div id="play-rewind-flex">
          <button id="start_stop" onClick={props.playPauseSession}>
            <i class="fa-solid fa-play"></i>
          </button>
          <button id="reset" onClick={props.resetSession}>
            <i class="fa-solid fa-arrow-rotate-left"></i>
          </button>
        </div>
        <audio id="beep" src="https://sampleswap.org/samples-ghost/SOUND%20EFFECTS%20and%20NOISES/Cheesy%20Lo-Fi%20Sound%20Effects/60[kb]Busyfone.wav.mp3" />
    </div>
  )
}
ReactDOM.render(<App />,document.getElementById("container"));